# -- common labels for all resources deployed by this chart
commonLabels: {}
# -- common annotations for all resources deployed by this chart
commonAnnotations: {}

config:
  authentication:
    htpasswd:
      # -- enable/disable htpasswd authentication backend
      enabled: true
      users:
        externalSecret:
          # -- name of a Secret containing the users and their passwords as generated by htpassword
          #    required, if htpasswd authentication is enabled. Can be templated
          name: ""
          # -- key in the above secret containing the users and their passwords. Can be templated.
          key: ".htpasswd"
      groups:
        # -- enable to map users authenticated by the htpasswd-backend to groups.
        enabled: false
        externalSecret:
          # -- name of a Secret containing the group-mapping for htpassword-authentication-backend
          #    required, if groups are enabled. Can be templated
          name: "{{ .Values.config.authentication.htpasswd.users.externalSecret.name }}"
          # -- key in the above secret containing the groups. Can be templated.
          key: "groups"
    ldap:
      # -- enable/disable ldap authentication backend
      enabled: false
      # -- url to the ldap-server to authenticate users against.
      #    If left empty, the ldap-server is configured from the external secret below. Can be templated.
      serverUrl: ""
      # -- bind-Dn used to bind users for authentication
      #    If left empty, the bindDn is configured from the external secret below. Can be templated.
      bindDn: "cn={username},{{ .Values.config.authentication.ldap.searchBase }}"
      # -- base-DN to search users in when getting group-memberships
      #    If left empty, the searchBase is configured from the external secret below. Can be templated.
      searchBase: ""
      # -- filter used when searching the user-object when getting group-memberships
      #    If left empty, the searchFilter is configured from the external secret below. Can be templated.
      searchFilter: "(sAMAccountName={username})"
      externalSecret:
        # -- name of a Secret containing the credentials for the user used to search group-memberships with
        #    required, if ldap authentication is enabled. Can be templated
        name: ""
        # -- key in the above secret containing the dn of the user used to search group-memberships
        #    # Required. Can be templated.
        managerDnKey: LDAP_MANAGER_DN
        # -- key in the above secret containing the password of the user used to search group-memberships
        #    # Required. Can be templated.
        managerPasswordKey: LDAP_MANAGER_PASSWORD
        # -- key in the above secret containing the ldap-server-url. Ignored if serverUrl is set above. Can be templated.
        serverUrlKey: LDAP_SERVER_URL
        # -- key in the above secret containing the ldap-bind-dn Ignored if bindDn is set above. Can be templated.
        bindDnKey: LDAP_BIND_DN
        # -- key in the above secret containing the search-base for looking up groups-memberships Ignored if searchBase is set above. Can be templated.
        searchBaseKey: LDAP_SEARCH_BASE
        # -- key in the above secret containing the search-filter for looking up groups-memberships Ignored if searchFilter is set above. Can be templated.
        searchFilterKey: LDAP_SEARCH_FILTER
  authorization:
    ingressRules:
      # enables rules provided by ingresses via header X-Authorization-Rules
      enabled: false
      secret:
        value: "{{ randBytes 32 }}"
        external:
          # -- if set to a non-empty value, the secret validating authorization-rules from the ingress
          #    is injected from the given secret;  otherwise a Secret is created with the value above
          #    (can be templated)
          name: ""
          # -- key in the secret where the value for the ingress-secret is stored (can be templated)
          key: "AUTHORIZATION_INGRESS_RULES_SECRET"
    # -- authorization rules (see https://github.com/Argelbargel/external-ldap-auth/tree/main/charts/auth-service#authorization-rules)
    rules: []
  authCacheTTLSecs: 15
  bruteForceProtection:
    # -- enable/disable brute-force-protection, blocking requests from ips after to many failed authentication requests
    enabled: true
    # -- determines how many failed authentication requests are allowed from one ip before requests get blocked
    maxFailureCount: 5
    # -- determines the window within which failed authentication requests are counted and for how long the ip is blocked
    expirationSecs: 60
  tls:
    # -- enable/disable https/tls for the service
    enabled: false
    externalSecret:
      # -- name of a Secret containing the TLS-certificate and key 
      #    Required if TLS is enabled. Can be templated.
      name: "{{ .Values.ingress.tls.secretName }}"
      # -- name of the key in the above secret containing the certificate-data. Can be templated.
      certKey: "tls.crt"
      # -- name of the key in the above secret containing the certificate-key. Can be templated.
      keyKey: "tls.key"
  logging:
    # -- configures the log-level of the service.
    level: 'WARN'
    # -- configures the log-format of the service.
    format: 'JSON'

image:
  # -- overrides the image-repo for the deployed container-image. Can be templated.
  repo: "ghcr.io/argelbargel/external-ingress-auth"
  # -- overrides the image-tag for the deployed container-image. Can be templated.
  tag: "{{ .Chart.AppVersion }}"
  pullPolicy: IfNotPresent
  # -- image-pull-secrets; can be templated e.g to use helm-values
  pullSecrets: []

deployment:
  replicas: 1
  # -- additional labels specific to the deployment resource
  labels: {}
  # -- additional annotations specific to the deployment resource
  annotations: {}
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      memory: 128Mi
  # -- initContainers for the deployment; can be templated e.g to use helm-values
  initContainers: []
  # -- additional volume mounts for the external-ldap-auth-container; can be templated e.g to use helm-values
  volumeMounts: []
  # -- additional volumes for the deployment; can be templated e.g to use helm-values
  volumes: []

service:
  # -- the service-type
  #     As the auth-service should only be used by Ingresses and not receive client-traffic directly, this should be kept at ClusterIP in most use-cases.
  type: ClusterIP
  # -- additional labels specific to the service resource
  labels: {}
  # -- additional annotations specific to the service resource
  annotations: {}

serviceMonitor:
  # -- enable a Service-Monitor monitoring the metrics exposed by the auth-service
  enabled: false
  # -- additional labels specific to the service-monitor resource
  labels: {}
  # -- additional annotations specific to the service-monitor resource
  annotations: {}

ingress:
  # -- when true, generates an Ingress for the auth-service.
  #    As the auth-service should only be used by Ingresses, should NOT enable this in production in most use-cases.
  enabled: false
  # -- additional labels specific to the ingress resource
  labels: {}
  # -- additional annotations specific to the ingress resource
  annotations: {}
  # -- host-name for the ingress.
  #    Required if ingress is enabled. Can be templated.
  host: ""
  tls:
    enabled: false
    # -- name of a Secret containing the certificate data. 
    #    Required if tls enabled. Can be templated
    secretName: ""
